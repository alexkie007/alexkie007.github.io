{"meta":{"title":"技术栈","subtitle":null,"description":null,"author":"於杰","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Rails使用七牛云存储","slug":"Rails使用七牛云存储","date":"2017-08-03T01:54:21.000Z","updated":"2017-08-03T02:14:53.000Z","comments":true,"path":"2017/08/03/Rails使用七牛云存储/","link":"","permalink":"http://yoursite.com/2017/08/03/Rails使用七牛云存储/","excerpt":"","text":"注册七牛云注册后，在个人面板-&gt;密钥管理 可以查看AccessKey/SecretKey 创建存储空间对象存储存储空间名称是 qiniu bucket测试域名是 qiniu bucket domain 设置七牛云12345678910111213141516171819202122232425262728293031323334353637383940414243Gemfilegem `carrierwave-qiniu`gem &apos;qiniu-rs`touch config/initializers/carrierwave.rbconfig/initializers/carrierwave.rbCarrierWave.configure do |config| config.storage = :qiniu config.qiniu_access_key = ENV[&quot;qiniu_access_key&quot;] config.qiniu_secret_key = ENV[&quot;qiniu_secret_key&quot;] config.qiniu_bucket = ENV[&quot;qiniu_bucket&quot;] config.qiniu_bucket_domain = ENV[&quot;qiniu_bucket_domain&quot;] config.qiniu_block_size = 4*1024*1024 config.qiniu_protocol = &quot;http&quot; config.qiniu_up_host = &quot;http://up.qiniug.com&quot; #选择不同的区域时，&quot;up.qiniug.com&quot;endapp/uploders/image_uploader.rbstorage :qiniuproduction: qiniu_access_key: xxxx # 你的 qiniu AccessKey qiniu_secret_key: xxxx # 你的 qiniu SecretKey qiniu_bucket: xxxx # 你的 qiniu bucket qiniu_bucket_domain: xxxx # 你的 qiniu bucket domain development: qiniu_access_key: xxxx # 你的 qiniu AccessKey qiniu_secret_key: xxxx # 你的 qiniu SecretKey qiniu_bucket: xxxx # 你的 qiniu bucket qiniu_bucket_domain: xxxx # 你的 qiniu bucket domain","categories":[],"tags":[{"name":"Rails","slug":"Rails","permalink":"http://yoursite.com/tags/Rails/"}]},{"title":"Rails中Model的关系","slug":"Rails一对多","date":"2017-07-25T13:28:05.000Z","updated":"2017-08-03T01:52:44.000Z","comments":true,"path":"2017/07/25/Rails一对多/","link":"","permalink":"http://yoursite.com/2017/07/25/Rails一对多/","excerpt":"","text":"一对多建立Group/Post/User三者关系 Model 12345678910111213141516171819202122class Group &lt; ApplicationRecord belongs_to :user has_many :posts validates :title, presence: trueendclass User &lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable and :omniauthable devise :database_authenticatable, :registerable, :recoverable, :rememberable, :trackable, :validatable has_many :groups has_many :postsendclass Post &lt; ApplicationRecord belongs_to :user belongs_to :groupend Route 123resources :groups do resources :postsend posts/new.html.erb 1234567891011&lt;h2 class=&quot;text-center&quot;&gt;新增文章&lt;/h2&gt;&lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt; &lt;%= simple_form_for [@group,@post] do |f| %&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;%= f.input :content, input_html: &#123; class: &quot;form-control&quot;&#125; %&gt; &lt;/div&gt; &lt;div class=&quot;form-actions&quot;&gt; &lt;%= f.submit &quot;Submit&quot;, disable_with: &quot;Submiting...&quot;, class: &quot;btn btn-primary&quot;%&gt; &lt;/div&gt; &lt;% end %&gt;&lt;/div&gt; rank 123456789def show @group = Group.find(params[:id]) @posts = @group.posts.order(&quot;created_at DESC&quot;)end更好的写法models/post.rbscope :recent, -&gt;&#123;order(&quot;created_at DESC&quot;)&#125;controllers/groups_controller.rb@posts = @group.posts.recent 多对多123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657rails g model group_relationship group_id:integer user_id:integermodels/user.rb has_many :group_relationships has_many :participated, :through =&gt; :group_relationships def is_member_of?(group) participated_groups.include?(group) end models/group_relationships.rb belongs_to :group belongs_to :user models/group.rb has_many :group_relationships has_many :participated_groups, :through =&gt; :group_relationships, :source =&gt; :group ## 判断是否属于该group def is_member_of?(group) participated_groups.include?(group) end ## 加入group def join!(group) participated_groups &lt;&lt; group #code end ## 退出group def quit!(group) participated_groups.delete(group) #code end controllers/group_controller.rb def join @group = Group.find(params[:id]) if !current_user.is_member_of?(@group) current_user.join!(@group) flash[:notice] = &quot;加入本讨论版成功！&quot; else flash[:warning] = &quot;你已经是本讨论版成员了！&quot; end redirect_to group_path(@group) end def quit @group = Group.find(params[:id]) if current_user.is_member_of?(@group) current_user.quit!(@group) flash[:alert] = &quot;已退出本讨论版！&quot; else flash[:warning] = &quot;你不是本讨论版成员，怎么退出&quot; end redirect_to group_path(@group) end routes.rb","categories":[],"tags":[{"name":"Rails","slug":"Rails","permalink":"http://yoursite.com/tags/Rails/"}]},{"title":"devise打造登陆功能","slug":"Devise打造登陆功能","date":"2017-07-24T09:11:15.000Z","updated":"2017-08-03T01:52:02.000Z","comments":true,"path":"2017/07/24/Devise打造登陆功能/","link":"","permalink":"http://yoursite.com/2017/07/24/Devise打造登陆功能/","excerpt":"","text":"安装登陆系统gem devise 产生必要文件123456789101112131415161718192021222324252627282930313233rails g devise:installrails g devise userrake db:migrate在需要用户登录的Controllerbefore_action :authenticate_user! , only: [:new,:create,:edit, :update, :destroy] &lt;% if !current_user %&gt; &lt;li&gt;&lt;%= link_to(&quot;注册&quot;, new_user_registration_path) %&gt; &lt;/li&gt; &lt;li&gt;&lt;%= link_to(&quot;登录&quot;, new_user_session_path) %&gt;&lt;/li&gt; &lt;% else %&gt; &lt;li class=&quot;dropdown&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt; Hi!, &lt;%= current_user.email %&gt; &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt; &lt;/a&gt; &lt;ul class=&quot;dropdown-menu&quot;&gt; &lt;li&gt; &lt;%= link_to(&quot;退出&quot;, destroy_user_session_path, method: :delete) %&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;% end %&gt; &lt;/ul&gt; 用户和Model关联def change add_column :groups ,:user_id, :integerend 不是model的主人没有权限进行修改@group = Group.find(params[:id])if current_user != @group.user redirect_to root_path, alert: &quot;You have no permission.&quot;end 修改使用用户名登陆123456789101112131415161718192021222324rails g devise userconfig/initialzers/devise.rbconfig.authentication_keys = [ :username ] application_controller.rbbefore_action :configure_permitted_parameters, if: :devise_controller? protected def configure_permitted_parameters devise_parameter_sanitizer.for(:sign_up) &#123; |u| u.permit(:username, :password, :password_confirmation, :remember_me) &#125; devise_parameter_sanitizer.for(:sign_in) &#123; |u| u.permit(:username, :password, :remember_me) &#125; devise_parameter_sanitizer.for(:account_update) &#123; |u| u.permit(:username, :password, :password_confirmation, :current_password) &#125; end 注册时如果出现email can&apos;t be blank models/user.rb def email_required? false end rails g migration remove_index remove_index :users, :column=&gt;:email 可参考博客-Rails使用Devise验证用户-Devise使用指南-rails使用devise验证","categories":[],"tags":[{"name":"Rails, gems","slug":"Rails-gems","permalink":"http://yoursite.com/tags/Rails-gems/"}]},{"title":"Rails常用插件","slug":"Rails常用插件","date":"2017-07-24T09:10:53.000Z","updated":"2017-08-03T01:52:19.000Z","comments":true,"path":"2017/07/24/Rails常用插件/","link":"","permalink":"http://yoursite.com/2017/07/24/Rails常用插件/","excerpt":"","text":"前端插件12345gem &apos;sassc-rails&apos;gem &apos;bootstrap-sass&apos;gem &apos;font-awesome-rails&apos;gem &apos;jquery-ui-rails&apos;gem &apos;amazeui&apos;, :git =&gt; &apos;git://github.com/zheye-dev/amazeui-rails.git&apos; 使用bootstarp和fontawesome1234567mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss`并在里面加上@import &quot;bootstrap-sprockets&quot;;@import &quot;bootstrap&quot;;在application.js//= require bootstrap-sprockets//= require bootstrap/alert Console展示1gem &apos;awesome_rails_console‘ 实用插件 ‘simple_form’ 12345678910gem &apos;simple_form&apos;rails g simple_form:install --bootstrapeg:自带错误提示&lt;%= simple_form_for @group do |f| %&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;%= f.input :title, input_html:&#123;class:&quot;form-control&quot;&#125; %&gt; &lt;%= f.input :description, input_html:&#123;class:&quot;form-control&quot;&#125; %&gt; &lt;/div&gt; &lt;%= f.submit &quot;Submit&quot;, class: &quot;btn btn-primary&quot;,data:&#123;disable_with:&quot;Submiting...&quot;&#125;%&gt;&lt;% end %&gt; devise 1gem &apos;devise 翻页插件 ‘will_paginate’ 1234 @posts = @group.posts.recent.paginate(:page =&gt; params[:page], :per_page =&gt; 5)&lt;div class=&quot;text-center&quot;&gt; &lt;%= will_paginate @posts %&gt;&lt;/div&gt; ‘kaminari’ 文件上传- &apos;carrierwave&apos; 12345678910111213141516gem &apos;carrierwave&apos;rails g migration add_attachment_to_resumeadd_column :resumes, :attachment, :stringmodels/resume.rbmount_uploader :attachment, AttachmentUploaderrails g uploader attachmentcontrollers/resume_controllers.rbdef resume_params: params.require(:resume).permit(:content, :attachment)end ## 图片网址 123https://picjumbo.comhttps://unsplash.comhttps://pixabay.com","categories":[],"tags":[{"name":"Rails，Gems","slug":"Rails，Gems","permalink":"http://yoursite.com/tags/Rails，Gems/"}]},{"title":"Rails环境搭建","slug":"Rails环境搭建","date":"2017-07-24T05:55:04.000Z","updated":"2017-07-24T09:11:53.000Z","comments":true,"path":"2017/07/24/Rails环境搭建/","link":"","permalink":"http://yoursite.com/2017/07/24/Rails环境搭建/","excerpt":"","text":"1.安装Xcode在AppStore里面搜索Xcode并进行安装 2.安装Homebrew 在终端里输入/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;3.安装Gitbrew install git 4.安装ImageMagick ImageMagick是专门处理图片的库brew install imagemagick 5.安装数据库 mysqlbrew install mysql postgresql12brew install postgresqlbrew service start postgresql 确保下次开机自动启动 6.安装RVM123\\curl -sSL https://get.rvm.io | bash -s stablesource ~/.rvm/scripts/rvmbrew install libxml2 7.安装rubyrvm install 2.3.3 rvm use 2.3.1 --default 8.安装Railsgem install rails 9.创建rails 应用12345rails new app_name 可以添加参数--skip-bundle 跳过bundle install 过程 -d=mysql2 设置数据库设置source https://gems.ruby-china.org 10.启动Rails应用12bundle install rails s","categories":[],"tags":[{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"}]},{"title":"搭建博客","slug":"搭建博客","date":"2017-07-23T14:59:22.000Z","updated":"2017-07-24T04:27:06.000Z","comments":true,"path":"2017/07/23/搭建博客/","link":"","permalink":"http://yoursite.com/2017/07/23/搭建博客/","excerpt":"","text":"环境配置 Node.js brew install node Git 安装Hexo npm install -g hexo 初始化hexo init 生成静态页面hexo g 本地启动hexo server现在打开http://localhost:4000就可以访问了配置GitHub 建立Repository建立与用户名对应的仓库，仓库名必须为github的用户名.github.io，比如我的用户名是alexkie007,则仓库名为alexkie007.github.io 修改配置文件/Blog/_config.yml 1234567// 最下面deploy: type: git repo: https://github.com/leopardpan/leopardpan.github.io.git branch: master然后执行命令npm install hexo-deployer-git --save 部署hexo d 修改配置12345vim Blog/themes/theme_name/_config.yml修改图像avatar: 图片地址vim Blog/_config.yml修改名称author:於杰themes:icarus 文章属性 banner: 图片地址 thumbnail: 图片地址 常用命令部署流程123hexo cleanhexo ghexo d 七牛云作为图床12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 12345678st=&gt;start: 个人注册op1=&gt;operation: 选择服务区域op2=&gt;operation: 对象存储op3=&gt;operation: 上传图片，关闭op3=&gt;operation: 复制外链e=&gt;endst-&gt;op1-&gt;op2-&gt;op3-&gt;e 常用链接awesome-hexo主题列表···","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-07-23T14:15:57.000Z","updated":"2017-07-23T14:15:57.000Z","comments":true,"path":"2017/07/23/hello-world/","link":"","permalink":"http://yoursite.com/2017/07/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}